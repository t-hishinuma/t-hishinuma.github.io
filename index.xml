<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on hpc::numa.blog()</title>
    <link>https://hishinuma-t.dev/</link>
    <description>Recent content in Home on hpc::numa.blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (C) 2020 Toshiaki Hishinuma, All rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hishinuma-t.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Works (Software and Documents)</title>
      <link>https://hishinuma-t.dev/works/list/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/works/list/</guid>
      <description>Software DD-AVX_v3
Library of High Precision Sparse Matrix Operations Accelerated by SIMD AVX
v.1.0 release blog
numa_benchmark
NUMerical linear Algebra Benchmark (with docker)
Xev-GMP-Web
Xev-GMP-Web converts a C source code which uses double variables into a C source code which uses GNU GMP library.
Lis_DD_AVXkernels
LisのDD機能をAVX, AVX2に拡張する差分，およびマージスクリプト
Documents CAEエンジニアのためのHPC (書き途中, ほぼ白紙)
Other   博士論文を情報処理学会 2019年度研究会推薦博士論文速報にて取り上げていただきました．URL, (魚拓)
  上記の研究会推薦博士論文速報が情報処理 第61巻，第9月号に掲載されました．URL (記念写真1, 2)
  菱沼 利彰, 加山 英賢. 通信のストライピングによる高速データ転送, 第1回ICTプログラミングコンテスト, GMOクラウド賞 受賞, 東京, 2012年5月.</description>
    </item>
    
    <item>
      <title>AVX2を用いた高速な倍々精度疎行列計算ソフトウェアの有限要素解析への適用可能性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020/</guid>
      <description>Citation (bibtex) @article{hishinuma_jsism2020, title={{AVX2を用いた高速な倍々精度疎行列計算ソフトウェアの有限要素解析への適用可能性評価}}, author={菱沼利彰 and 森田直樹}, journal={{日本応用数理学会 2020年度年会}}, pages={417--418}, year={2020} } Link: https://annual2020.jsiam.org/</description>
    </item>
    
    <item>
      <title>混合精度疎行列計算ライブラリDD-AVX v3のv1.0をリリースした</title>
      <link>https://hishinuma-t.dev/posts/tools/dd-avx_v10/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/dd-avx_v10/</guid>
      <description>はじめに DD-AVX_v3という名前なのにv1.0とはこれいかに？
ま，まぁとりあえずリリースしたんじゃよ
githubから落としてこられる↓
https://github.com/t-hishinuma/DD-AVX_v3
DD-AVX_v3ってなに？ 一言でいうとSIMDで高速化した倍精度とDouble-Double精度のSparse BLAS．
混合精度のKrylov部分空間法をいかに簡単かつ高速に実装できるかを考えて作ったライブラリ．
悪条件な問題を解こうとしたとき，高精度演算を使うことで丸め誤差による近似解の収束の影響を抑えて早く収束できる．
ただ，例えば行列は他のライブラリから降ってくるので倍精度でよいとか， 残差の計算は別に倍精度でも良いとか，様々な理由ですべてを倍々精度にしなくても良いというシチュエーションがある．
しかし，変数の精度をどうすれば効率的に計算できるのかはよくわからないし， 普通に考えれば独自型と標準型を組み合わせたコードで変数の型をコロコロ変えるのは吐き気がするレベルで面倒くさい．
私は博士に進学する前は高精度なシミュレーションをやりたいと思ったものだが， 倍精度とDDを組み合わせたKrylov部分空間法を簡単に作るのがそもそも面倒臭すぎる ということで始まったのがDD-AVXライブラリで，色々とI/Fを変えているうちにv3になってしまったということである．
DD型を簡単に扱う方法はBailey, Hida先生のQDライブラリの dd_real 型を使うことになるのだが， ベクトルや行列を std::vector&amp;lt;dd_real&amp;gt; のようにして宣言することになる．
このときメモリレイアウト的には下のようなAoS型になる． これが倍精度と組み合わせて混合精度演算をしたり，並列化をしようとしたときに非常に遅くなる．
そこでSoA型にしようとなるのだが，これは std::vector のようなベクトルを簡単に使うI/Fが利用できなくなる．
じゃあSoA型に気合で std::vector っぽい主要機能を全部書いてやればいいやんけ
これが地獄の始まりでした(車輪の再発明ってレベルじゃないぞ1年かかったわ)
ということでDD-AVX_v3では5つのクラスを提供している．
Scalar  d_real (alias of double) dd_real (provided by the QD Library)  Vector  d_real_vector dd_real_vector  Sparse matrix (CRS format)  d_real_SpMat  スカラやベクタの四則演算レベルから基本的な機能を実装してある． これらはD/DDのキャストや代入などもサポートしているため， 連立一次方程式ソルバをtemplateで実装すれば同じI/Fで倍精度とDD型を使える．
現状ではテスト不足で疎行列型はファイルからのI/Oしかできないのと，SpMVしか実装できないです．v1.1でTSpMVと行列I/Fは追加予定
内部ではすべての方の組み合わせに対してAVX / AVX2のintrinsicsを使って最適化してあるため， どの変数を入れてもDDにキャストされるわけではなく，ちゃんと入力に応じたDDのアルゴリズムが呼ばれるようになっている．
ちなみにaxpyの内部実装はこんな感じ↓
https://github.com/t-hishinuma/DD-AVX_v3/blob/master/src/vector/blas/axpy.cpp
具体的にはBLAS Lv.</description>
    </item>
    
    <item>
      <title>scpで圧縮転送，踏み台など</title>
      <link>https://hishinuma-t.dev/posts/tools/scp_command/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/scp_command/</guid>
      <description>はじめに 以下の記事は昔のブログに書いてて，忘れたら見に行ってたんだけど，昔のブログはそろそろ潰そうかと思っているので，ここに書き直す．
  ファイルを圧縮して高速転送．トラフィックを減らす．
scp -C file usr@name:~/
  暗号化方式を変える(ローカルで暗号化は雑でいいから早く送りたいなど)
scp -c arcfour128 file usr@name:~/
  踏み台経由の転送
scp -o &#39;ProxyCommand ssh 192.168.0.1 -W %h:%p&#39; file user@name:~/
  以上です．おやすみ．</description>
    </item>
    
    <item>
      <title>tmuxでAlt&#43;矢印キーでペインサイズを変更する</title>
      <link>https://hishinuma-t.dev/posts/tools/tmux_arrow/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/tmux_arrow/</guid>
      <description>よく忘れるので書いておきます
bind-key -n M-Up resize-pane -U 5 bind-key -n M-Down resize-pane -D 5 bind-key -n M-Left resize-pane -L 5 bind-key -n M-Right resize-pane -R 5 tmuxも色々カスタマイズできるけど，基本的に必須なのはこれくらいですかね．．</description>
    </item>
    
    <item>
      <title>SX-Aurora TSUBASAにおける有限要素解析のための共役勾配法の性能評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc175/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc175/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc175, title={SX-Aurora TSUBASAにおける有限要素解析のための共役勾配法の性能評価}, author={{菱沼 利彰, 井原 遊, 高村 守幸, 平野 哲, 萩原 孝, 岩田 直樹, 奥田 洋司}}, journal={{情報処理学会研究報告}}, volume={2020-HPC-175}, number={18}, pages={1--10}, year={2020} } Links 情報処理学会 電子図書館</description>
    </item>
    
    <item>
      <title>ブラウザからサーバにファイルをuploadするためにdroppyを試す</title>
      <link>https://hishinuma-t.dev/posts/tools/droppy/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/droppy/</guid>
      <description>はじめに サーバ上で作業をしていて，手元のファイルをupload / downloadしたいことがよくあると思う．
大きいファイルを1回送るくらいならやるが， たとえばgnuplotやLaTex, Doxygenと格闘しているときなんかは サーバ上で生成された画像をdownloadしたり，手元でAdobeなどで作った画像を何度もUploadするようなシチュエーションが生まれる．
基本的に全てのマシンに同じ環境を構築したいので，マウントするなどのOS依存っぽいことや， 謎のフリーソフトを全部の端末に入れて回るみたいなことはやりたくない． (手動だし)
サーバ側ではコマンド一発で構築できて，クライアント側では導入作業なく利用できるファイルのdonwload/uploadはないものかと思い， dockerで構築できて，ブラウザから利用できる物を探した．
利用は作業中だけの一過性のものなので，セキュリティとかは気にしなくて良いことにする．
Download, 閲覧はあんまり問題にならなくて，httpサーバを立てればいいので
 nginxをdockerであげてみたり (dockerhub) cargoで入れられてディレクトリを一発で公開できるやつを使ったり (basic-http-server)  他にもやりようはいくらでもある．
ちなみに2.は
cargo install basic-http-server basic-http-server -x -a 0.0.0.0:8080&amp;quot; で現在いるディレクトリがhttpで公開されてこんな風に見える
問題はuploadである．特に↑の画像みたいなスクリーンショットをmarkdownに貼るなんてやろうと思った日には スクリーンショットをファイルに保存してターミナル開いてscpするとかしないといけないので発狂しそうになる．
droppy 結論から言うとdroppyというのが軽くて良さそうだということが分かった．
これ自体はnpmのライブラリなのでnode.jsを入れなきゃいけないかと思ったらちゃんとdockerが公開されていた． なんとdocker imagesで確認すると99.5 MBしかない．
root権限でuploadなんかされたらたまったもんじゃないので，ユーザをちゃんと指定してあげることにして，次のようにすればOK． configのフォルダをマウントしてオプションを色々設定できるみたいだけど，ディレクトリ一覧が見れてちょっとuploadできればいいのでデフォルトに任せた．
docker run -p 8080:8989 -v $PWD:/files/ -e UID=$(id -u) -e GID=$(id -g) silverwind/droppy 見た目はこんな感じ．画面分割もできる． 上げるとユーザ名を聞かれるが，適当なユーザ名とパスワードを入れるとログインできる． aとかbとかでいい．真面目にやる場合はconfigで設定するんだと思う．
いいところ
 ドラッグアンドドロップでファイルやディレクトリを送れる スクリーンショットを取ってペーストボタンを押すとちゃんとファイルとして保存される (素晴らしい！) 画像などはブラウザ上で閲覧できる テキストファイルなどはエディタが出てきて編集できる ディレクトリ作成，ファイル削除，リネームなどの簡単な作業ができる docker imagesで確認すると99.5 MBしかない．  悔しいところ</description>
    </item>
    
    <item>
      <title>gmpの実装とC&#43;&#43;からの利用法，性能について(1) [gmp multi-precision]</title>
      <link>https://hishinuma-t.dev/posts/gmp/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/gmp/</guid>
      <description>はじめに そろそろTwitterのフォロワーが2500人を迎えるそうです． やはりマイナーな世界だけを深堀りするのでなく， もっと大衆受けする活動をしていくべきだと思いました．
そう，つまりマスに訴えかけることでHPC界のヒカキンのような存在になるのです．
では皆が見てくれるような一般的な話題ってなんなのか？
私は考えました．
google analyticsの結果を見るとこのページはPEZYと4倍精度という検索ワードでくる人がほとんどのようですが， そんな一部の研究者しか使わないものでなく，もっとマスに訴えかけるような，そんなテーマを考えました．
選ばれたのはGNUでした
そう．GNUに媚びて生きていこう．
つまり今回のテーマはGMPです．
なんと四則演算やFFTについて触れます．全国民がオオウケ間違いなし!
明日から倍精度を使うのをやめ，楽しい多倍長ライフが始まるはずです！
まぁ真面目に導入すると，2月頃にgccのfloat128の性能について書いたのがそこそこ閲覧数が多かったので， 他の高精度演算ライブラリについてもちょっと書くかー，と思って第2弾としてGMPを取りあげてみるということです．．
実際はもっと前から書いていたのですが，細部が書けずにいて，2500人だしここで公開しようと思い立って今に至ります．
様々な言語で多倍長整数は標準サポートされることも多くなってきましたが， 浮動小数点に関してはほとんど見かけませんし，実装自体も少ないです．
やはり浮動小数点演算は癖が強い(指数部が伸びるのか，仮数部が伸びるのか，どのくらい時間がかかるのか)や， ツールそのものがどういった機能を持っているかが分かりにくいです．
今回はGMPに着目して，機能面や実装面について紹介していきたいと思います．
ただ，GMPにはいろいろな難しい特徴があり，正直私もあまり詳しい事は言えないので，フォロワー2500人記念とかぶち上げておいてあれですが， 今回の記事では私が現状で知っているGMPの実装についてちゃんとまとめ，使い方と性能を簡単に見ることにします． (GMPで論文何件か書いたとは思えないほど内部の実装に自信がないおじさん)
GMPを用いたプログラム GMPはGNU Multi Precision Arithmetic Libraryのことで，float128などが4倍精度固定であるのに対し， GMPは変数の宣言時，またはどこかでデフォルトの仮数部の精度を指定することで任意の精度型を作ることができます．
ただし，仮数部を自動的に伸ばしたり，自動的に選択するような機能はついていません(そんなことをしたらメモリが大変なことに)．
指数部については固定で，仮数部を指定していくことになります． そのため例題などではよく円周率などが扱われる印象があります．
ここではC++版のgmpxx.hを使ってGMPの多倍長浮動小数点型であるmpf_tのC++ Wrapper, mpf_classを使ってみます． C++版を使えば演算子オーバーロードによって比較的簡単に実装することができます．
すべての変数が同じ精度で良い場合は，mpf_set_default_prec()という関数を使って精度を指定すればよいです． 簡単なプログラムは以下のようになります．
#include&amp;lt;gmpxx.h&amp;gt;#include&amp;lt;iostream&amp;gt;int main(){ mpf_set_default_prec(1024); mpf_class a(1.5); // a = 1.5 	mpf_class b = 1.0; mpf_class c = 0.0; c = a + b; std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl; return 0; } ね？簡単でしょ？</description>
    </item>
    
    <item>
      <title>gcloud cloud sdkを使いやすいように環境を整理した</title>
      <link>https://hishinuma-t.dev/posts/tools/gcp_setup/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/gcp_setup/</guid>
      <description>はじめに ちょっと前にすぐに導入方法とかコマンドを忘れて仕方がないので， bashrcに関数作ってGCPでよく使うコマンドを整理したので，忘れないうちにここに書いておく．
テスト用なんかでマシンを立てて，ペペッとコマンド流したいときにやるための：
 マシン一覧取得 マシン起動・停止 マシン接続 マシン削除  という作業を瞬殺する
バイナリをtar.gzで落としてくるのでちゃんと動くか不安だったが，CygwinとWindows上のVM Ubuntu18.04と実機のCentOS8では動いた．
WSLとMac？しらないけど動くんじゃない
google cloud sdkのinstall くわしいことは公式
yum とか apt でも入るって公式には書いてあるけどgoogleの認証情報を渡すコマンドをシステムに入れるのもなあとか思いながら(たぶん認証情報はユーザの場所に置かれるんだろうけど)，tar.gzがあったのでそっちを使うことにした．
まず落としてきて，
wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-280.0.0-linux-x86_64.tar.gz 入れたら解凍して /bin にパス通す．
sh ./install.sh すればいいって公式には書いてあるけど，どこに入るのかよくわかんないから信じずに自分でパスを通しているポンコツが私です．
gcloud components update するとupdateされるので知らんけどとりあえずやる
初期設定 gcloud init するとgoogleアカウントの認証がはじまる． なんか適当にやってるとURLが出てくるのでコピってブラウザに貼ると認証する．
gcloud compute instances list とかやるとマシンのリストが出てくれば勝ち
使う 上で書いたgcloud compute instances listとか，
gcloud compute instances start とか
やれば良いんだけどコマンドが長くてカロリーの無駄． 新しいマシンを作る設定とかは更に長くてオプションも多いし疲れる．
ってことでbashrcに関数作って纏めた．
alias glist=&#39;gcloud compute instances list&#39; alias gssh_up=&#39;gcloud compute config-ssh&#39; gstart() {gcloud compute instances start $1; gcloud compute config-ssh} gstop() {gcloud compute instances stop $1} gtest_up(){ gcloud compute instances create $1 \ --boot-disk-auto-delete \ --maintenance-policy TERMINATE \ --preemptible \ --zone us-central1-a \ --image-family ubuntu-2004-lts --image-project ubuntu-os-cloud \ --custom-cpu 8 \ --custom-memory 16 \ --boot-disk-size 10 \ } gtest_up は与えられた引数の名前のマシンはubuntu20.</description>
    </item>
    
    <item>
      <title>数値計算用のベンチマークを取れるコンテナを作っている (OpenBLAS, cuBLAS, fftw, cufft)</title>
      <link>https://hishinuma-t.dev/posts/numa_benchmark/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/numa_benchmark/</guid>
      <description>TL; DR 検索するとCineBenchやゲーム系のベンチマークとかいう何をやっているのか良くわからん結果ばっかりで数値計算の役に立たないのしかでてこない．
STREAMとDGEMM/SGEMMとFFTをCPUとGPUで回してくれるだけでいいんだ！と思うんだけど，冷静に考えるとそういうライブラリってベンチマーク機能が付いてるわけじゃない (てかSTREAMって使いにくいよね．．．)．
ベンチマーク結果はIntelとかNvidiaも出しているけど，アーキごとに項目が整っているとは言いにくい．
数値計算の結果は少ない人数しか興味がなかったのは昔の話で，最近は機械学習の人とかもBLASとかFFTの結果を知りたいはずだから需要がある気がしてるんだけど，統一されたベンチマークがでてくる気配はない．
ベンチマークは比較に意味があるので多くの人が回してくれることが望ましいけど， 我々みたいに自分でOpenBLASだのcuBLASだとfftwだの落としてビルドして，自分でC++でベンチマークコード書いて，自分でsedとかawkとか叩いてgnuplotで整形できる人ばっかりじゃないはず．
そうだ．コンテナ使って数値計算ライブラリの評価が簡単にやれるやつ作ろう．と思い立ってから早かった手作りベンチマークコンテナ
最近はDockerでGPGPUするのも簡単になったしUbuntu 20.04ではDockerがaptで入るようになったしな！
あ，名前は numa_benchmarkにしました．
NUMerical linear Algebra Benchmarkの略であってhishinumaとは関係ありません．本当です．
で，どうやって使うの コードはここにおいて作ってる．ちゃんとCPUとGPUの両方に対応してる．
https://github.com/t-hishinuma/numa_benchmark
コンテナ内に中にrunってコマンドが仕込んであって，実行するとそれを回してくれるようにした．かんたん．
runするとOpenBLASをビルドしていろんなサイズでベンチマークしてくれる．
いまは dot と gemm のベンチマークだけけど， だいたいコンテナ落とす時間も含めて10分くらいで終わるんじゃないかな． 機能面はこれから増やしていくつもり (STREAMはdotがあるからいいかな．．？いいよね．．？)．
DockerHubにも上げてあるので，サイズとかデフォルト設定でいい人は
docker run hishinumat/numa_benchmark run するだけで簡単にベンチマークしてyaml形式で標準出力に結果を出してくる．
サイズとか色々変えたい人はgitからconfigを落としてきて，書き換えて，configのある場所をdockerにマウントすればそのとおりに実行される．
$PWD のマウントで良ければ make benchmark すればdockerコマンド打たなくてよい
git clone git@github.com:t-hishinuma/numa_benchmark.git # vim benchmark_config # if need to change make benchmark 自分でconfigを食わせた場合は結果はresult/に出てくる． せっかくの仮想化だから，pythonのライブラリなんかもコンテナに混ぜて，yamlを元にmatplotlibでプロットしたpngとhtmlも出力してくれるようにした．
でもコードはPythonなんもわからんおじさんすぎてあまりにも適当．
この辺手伝ってくれる人が居たらとても喜びます
結果はこんな感じで，だいたい欲しい情報はでていると思う．
- {&amp;quot;type&amp;quot; : &amp;quot;blas3&amp;quot;, &amp;quot;func&amp;quot; : &amp;quot;sgemm&amp;quot;, &amp;quot;arch&amp;quot; : &amp;quot;cpu&amp;quot;, &amp;quot;# of threads&amp;quot; : 4, &amp;quot;size&amp;quot; : 200, &amp;quot;time [s]&amp;quot; : 0.</description>
    </item>
    
    <item>
      <title>SIMD演算を用いた高精度疎行列計算ソフトウェアの高速化</title>
      <link>https://hishinuma-t.dev/papers/dr_thesis/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/dr_thesis/</guid>
      <description>Download PDF  Information  著者: 菱沼 利彰 学位授与大学: 筑波大学 (University of Tsukuba) 取得学位: 博士（情報学） / Doctor of Philosophy in Informatics JaLC DOI: info:doi/10.15068/00160612 学位授与年月日: 2020-03-25 報告番号: 12102甲第9609号  etc.  博士論文を情報処理学会 2019年度研究会推薦博士論文速報にて取り上げていただきました．URL, (魚拓) 上記の研究会推薦博士論文速報が情報処理 第61巻，第9月号に掲載されました．URL (記念写真1, 2)  </description>
    </item>
    
    <item>
      <title>gccの4倍精度の使い方と性能 [gcc quadruple precision]</title>
      <link>https://hishinuma-t.dev/posts/gcc_quad/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/gcc_quad/</guid>
      <description>2011年，5月のリリースでgcc4.6から4倍精度が入った． 昔のブログで軽く使い方を書いたが他のサイトに情報があまり増えてなかったし，私の記事もできが悪かったのでこっちに移転したので改めてまとめてみた．
使い方 簡単な使い方としては， libquadmathを使うことになる．
__float128 型を宣言して使う．倍精度を代入して使うこともできる． 4倍精度数を表現したい場合には後ろに q をつけて使う．
四則演算子や代入なども使えるが，printfだけはchar型の配列に変換してから使う必要がある． 適当なサンプルは以下のとおり：
#include&amp;lt;quadmath.h&amp;gt;#include&amp;lt;stdio.h&amp;gt;int main(){ char str[128]; __float128 a = 1.2345678901234567890q; __float128 b = 1.234; a = a + b; quadmath_snprintf(str,128,&amp;#34;%.40Qf&amp;#34;,a); printf(&amp;#34;%s&amp;#34;,str); return (0); } $ g++ -lquadmath -m128bit-long-double test.c こんな感じに作れる．I/Oがなければ同じプログラムでtemplate使って共通化できるが， I/Oだけは色々調べたがどうしようもなさそうだった．
性能評価 試しに内積を実装して時間を測ってみた．
コードはここにおいた (リポジトリを移動しました, 2020/05/18)．
出力を外に出せば，普通に倍精度と共通化してtemplateで作れた．
gcpで16コアのHaswellマシンを借りて実行してみた．
あんまり参考にはならないが Intel(R) Xeon(R) CPU @ 2.30GHzとのこと．
gccはgcc version 8.2.1 20180905 (Red Hat 8.2.1-3)
OSはCentOS Linux release 8.0.1905 (Core)\
表 各ベクトルサイズにおける倍精度と4倍精度の実行時間 [ms] (-O0, 最適化オプションなし，16 threads)</description>
    </item>
    
    <item>
      <title>Webサイトをgithub pages &#43; Hugoに移行した話</title>
      <link>https://hishinuma-t.dev/posts/hugo_web/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/hugo_web/</guid>
      <description>TL; DR github pagesとHugoでWebページを移行したぜ！
はじめに 要するにWebページを新しい技術(?)を試しつつ作った．
なんでこんな事を始めたかというと，いま2つのWebページを持っていて，それぞれ:
 筑波大学の学籍番号のWebページで業績整理 はてなブログに色々書いていた  いくつもWebサイトを抱えるのは正直嫌だったのと，大学の方は卒業すると(卒業できれば)消えてしまう． いろいろ調べたり考えたりして新しくしたよっていう話．
はてなブログをProにすることも考えたが，Wordpressのサービスだけを利用するのに月額1008円． そんなのWordpressのSaaSの代金としては信じがたい価格のように思えた (だってconohaとかさくらインターネットで他のことにも使える2 coreくらいのVPSが借りられてしまう)ので， Google Domainsで年額1400円のドメイン取って，github pages (無料) + Hugoで静的Webサイトを作ってみた．
それぞれ簡単に説明すると，HugoはMarkdownからhtmlを生成するツールで， HTMLを直接書かなくていいから楽だというもの． 記事はmarkdownで書いて，全体設定はtomlファイルで指定すると，Hugoコマンドがうまいことhtmlを生成してくれる．
github pagesというのはgithubのトップディレクトリにindex.htmlがあればWebページを公開してくれるというサービスで，独自のドメインも設定できる． 独自のドメインにこだわらなければ完全に無料で使える． そうそう超えないだろうけどgithub pagesにはいくつかの制限がある． 執筆している2020年2月の時点では：
 GitHub Pages サイトには、次の使用制限があります: GitHub Pages ソースリポジトリには、1GB の推奨上限があります。詳しい情報については、「私のディスク容量はいくつですか？」を参照してください。 公開されたGitHub Pagesのサイトは1GB以上であってはなりません。 GitHub Pages サイトには、月当たり 100GB のソフトな帯域幅制限があります。 GitHub Pages サイトには、時間当たり 10 ビルドのソフトな制限があります。
 とのことだが，まぁ基本的にいらぬ心配だろう．
このページは既にMarkdownごと私のgithubに置かれていて， 例えばこのページは src/content/posts/hugo_web.md から生成されて /postsに生成されているはずである． これなら万が一，github pagesの容量や制限がかかったとしても，手元にHTMLはあるのでサーバ借りて移すだけで簡単であろうというわけである．
実際どうなの (正直良くない点) 今のところ悪くはないが，静的HTMLなのでWordpressと比べると当然だけど出来ないことはある．
 Blogにコメント欄などをつけられない 業績一覧などをテーブルにして並び替えたり抽出したりできない ブラウザから記事をかけない 細かい調整やjsとの連携がきつい．  1,2は大きい問題ではあるが，ドメイン代の月100円そこらだけで運用できていて， 3も git push するだけなことを考えると，このくらいは諦めるべきだろう． あと，記事の作りやすい環境はVS codeあたりで構築できる気もする．嫌いだから使わないけど．</description>
    </item>
    
    <item>
      <title>An Evaluation of Double-Double Precision Operation for Iterative Solver Library Using AVX</title>
      <link>https://hishinuma-t.dev/papers/wo_review/isat_hishinuma/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/isat_hishinuma/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>AVX Acceleration of DD Arithmetic Between a Sparse Matrix and Vector</title>
      <link>https://hishinuma-t.dev/papers/with_review/ppam2013/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/ppam2013/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2013ppam, title={AVX acceleration of DD arithmetic between a sparse matrix and vector}, author={Hishinuma, Toshiaki and Fujii, Akihiro and Tanaka, Teruo and Hasegawa, Hidehiko}, booktitle={International Conference on Parallel Processing and Applied Mathematics}, pages={622--631}, year={2013}, organization={Springer} } Abstract High precision arithmetic can improve the convergence of Krylov subspace methods; however, it is very costly. One system of high precision arithmetic is double-double (DD) arithmetic, which uses more than 20 double precision operations for one DD operation.</description>
    </item>
    
    <item>
      <title>AVX2 acceleration of SpMV and vector operations with Double-double precision vectors</title>
      <link>https://hishinuma-t.dev/papers/wo_review/pmaa18/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/pmaa18/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍々精度反復解法の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc148/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc148/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc148, title ={{AVX2を用いた倍々精度反復解法の高速化}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{情報処理学会研究報告}}, volume={2018-HPC-148}, number={9}, pages={1--7}, year={2015} } </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍々精度演算の反復解法への適用と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_at/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_at/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍精度BCRS形式疎行列と倍々精度ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/with_review/acs48/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/acs48/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma2014acs, title={{AVX2 を用いた倍精度 BCRS 形式疎行列と倍々精度ベクトル積の高速化}}, author={菱沼利彰 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={{情報処理学会論文誌コンピューティングシステム (ACS)}}, volume={7}, number={4}, pages={25--33}, year={2014} } Abstract 高精度演算を用いることでKrylov部分空間法の収束を改善できるが，高精度演算はコストが高いことが知られている．高精度演算の1つに，倍精度を2つ組み合わせて4倍精度演算を行う倍々精度演算がある．我々は，IntelのSIMD拡張命令であるAVX2を用いてBCRS形式の倍精度疎行列と倍々精度ベクトルの積（DD-SpMV）の高速化を行った．AVX2を用いたCRS形式のDD-SpMVでは，各行で端数処理などを必要とするが，BCRS形式は端数処理をなくし，メモリアクセスを改善できる．しかし，BCRS形式は演算量が増加する．本論文では，AVX2に適したBCRS形式のブロックサイズと，増加した演算量と端数処理の削減，メモリアクセスの改善効果のトレードオフについて示した．実験の結果，AVX2に最も適したブロックサイズは4×1であることが分かった．また，メモリアクセスの改善効果はサイズの大きい問題ほど有効で，行列サイズが10 5以上のとき，演算量が3.3倍以上になるケースにおいても，BCRS4×1にすることでCRS形式の実行時間を約45%に短縮できることを確認した．
Links 情報処理学会論文誌 コンピューティングシステム
情報処理学会 電子図書館</description>
    </item>
    
    <item>
      <title>AVX2を用いた倍精度疎行列と倍々精度ベクトルの積における精度と性能</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2015/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2015/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>AVXを用いたBCRS形式疎行列ベクトル積の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_sato/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_sato/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2014_sato, title={{AVXを用いたBCRS形式疎行列ベクトル積の特性評価}}, author={佐藤真之介 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第76回情報処理学会全国大会}}, pages={215--216}, year={2014} } </description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積 -転置行列-</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpcs2013_poster/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpcs2013_poster/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/with_review/hpcs2013/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/hpcs2013/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma2013hpcs, title={{AVX を用いた倍々精度疎行列ベクトル積の高速化}}, author={菱沼利彰 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={ハイパフォーマンスコンピューティングと計算科学シンポジウム論文集}, volume={2013}, pages={23--31}, year={2013} } Abstract 計算性能の向上に伴い，高精度による計算が多くの場面で可能となっている．4倍精度を効率良く実現する手法として，2つの倍精度変数で1つの4倍精度変数を表現する倍々精度演算がある．本研究では，疎行列とベクトルの演算に使われる基本演算をAVX命令を用いて高速化し，性能を決定するパラメタについて分析を行うことにより，倍々精度演算をAVXで行う際の効果を示した．AVX命令を用いた場合，同時演算数の増加，3オペランド化によるレジスタ退避，復元処理の減少などの効果が大きく，SSE2の性能と比べて，キャッシュに収まる範囲のベクトル間の演算では約1.7から2.3倍の性能となったが，キャッシュに収まらない場合は，キャッシュアクセス，メモリアクセスが大きなボトルネックになることがわかった．倍精度の疎行列と倍々精度のベクトルの積では，約1.1から1.9倍の性能となり，メモリアクセスはボトルネックとならず，疎行列の1行あたりの非零要素の数が性能に大きな影響を与えていることがわかった．これらの結果から，倍々精度の疎行列ベクトル積の性能を予測する1つの指標を導出した．
Links HPCS2013
情報処理学会 電子図書館</description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/mpcomp3/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/mpcomp3/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>Fast computation of double precision sparse matrix in BCRS and DD vector product using AVX2</title>
      <link>https://hishinuma-t.dev/papers/wo_review/vecpar2014/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/vecpar2014/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>GMPを用いた混合精度型プログラムの自動生成機構の提案</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_mp/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_mp/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>GMPライブラリを用いた任意多倍長プログラムへの自動変換機構の提案</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc152/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc152/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc152, title={{GMPライブラリを用いた任意多倍長プログラムへの自動変換機構の提案}}, author={榊原巧磨 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, journal={{情報処理学会研究報告}}, volume={2018-HPC-152}, number={6}, pages={1--8}, year={2015} } </description>
    </item>
    
    <item>
      <title>Hierarchical Diagonal Blockingを用いた疎行列ベクトル積の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_hanaue/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_hanaue/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2015_hanaue, title={{Hierarchical Diagonal Blockingを用いた疎行列ベクトル積の特性評価}}, author={花上直樹 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第77回情報処理学会全国大会}}, pages={31--32}, year={2015} } </description>
    </item>
    
    <item>
      <title>Implementation and Evaluation of BLAS on PEZY-SC/SC2 Processor</title>
      <link>https://hishinuma-t.dev/papers/wo_review/siam_pp18/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/siam_pp18/</guid>
      <description>Abstract We have been developing the power-efficient super computer ZettaScaler series. We adopted three novel technologies, MIMD ultra-manycore processor called “PEZY-SC series, high density server board “Brick”, and direct liquid immersion cooling system. They enable us to realize high performance, low power consumption, and space miniaturization at a same time. A 1st generation processor “PEZY-SC”has 1024 MIMD core, and a 2nd generation processor “PEZY-SC2” has 2048 MIMD core. For a high performance numerical simulation, we implement the BLAS on the PEZY-SC/SC2 processor that called “PZBLAS.</description>
    </item>
    
    <item>
      <title>Intel/KNLにおける倍々精度疎行列ベクトル積の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_doi/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_doi/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2018_doi, title={{Intel/KNLにおける倍々精度疎行列ベクトル積の特性評価}}, author={土肥樹 and 伊藤友太 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第80回情報処理学会全国大会}}, pages={51--52}, year={2018} } </description>
    </item>
    
    <item>
      <title>Knights Landingにおける倍々精度基本演算のハイブリッド並列の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_ito/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_ito/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2018_ito, title={{Knights Landingにおける倍々精度基本演算のハイブリッド並列の特性評価}}, author={伊藤友太 and 土肥樹 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第80回情報処理学会全国大会}}, pages={55--56}, year={2018} } </description>
    </item>
    
    <item>
      <title>Many Integrated Corearchitecture における倍々精度疎行列ベクトル積</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc145/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc145/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc145, title={{Many Integrated Corearchitecture における倍々精度疎行列ベクトル積}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{情報処理学会研究報告}}, volume={2018-HPC-145}, number={16}, pages={1--7}, year={2014} } </description>
    </item>
    
    <item>
      <title>PEZY-SC2上における倍々精度Rgemmの実装と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2018/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2018/</guid>
      <description>Download PDF  SlideShare </description>
    </item>
    
    <item>
      <title>PEZY-SC2上における倍々精度演算ライブラリpzqdを用いた倍々精度Rgemmの高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc167/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc167/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc167, title={PEZY-SC2 上における倍々精度演算ライブラリ pzqd を用いた倍々精度 Rgemm の高速化}, author={菱沼利彰 and 中田真秀}, journal={{情報処理学会研究報告}}, volume={2018-HPC-167}, number={10}, pages={1--9}, year={2018} } </description>
    </item>
    
    <item>
      <title>PEZY-SC3に向けたPEZY-SCシリーズ向けOpenFOAMの実装と性能評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/opencae2018/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/opencae2018/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_opencae2018, title={{PEZY-SC3に向けたPEZY-SCシリーズ向けOpenFOAMの実装と性能評価}}, author={菱沼利彰 and 黒澤範行}, journal={{オープンCAEシンポジウム2018 梗概集}}, pages={1--6}, number={A25}, year={2018} } </description>
    </item>
    
    <item>
      <title>pzqd: PEZY-SC2 Acceleration of Double-Double Precision Arithmetic Library for High-Precision BLAS.</title>
      <link>https://hishinuma-t.dev/papers/with_review/icces2019/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/icces2019/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2019pzqd, title={pzqd: PEZY-SC2 Acceleration of Double-Double Precision Arithmetic Library for High-Precision BLAS}, author={Hishinuma, Toshiaki and Nakata, Maho}, booktitle={International Conference on Computational \&amp;amp; Experimental Engineering and Sciences}, pages={717--736}, year={2019}, organization={Springer} } Abstract We implemented pzqd, a high precision arithmetic library for the PEZY-SC2 that is based on Hida \etal{}&amp;rsquo;s QD library. PEZY-SC2 is an MIMD (multiple instruction stream, multiple data stream) -type many-core processor. We optimized matrix-matrix multiplication (Rgemm) in double-double precision (DD) on the PEZY-SC2.</description>
    </item>
    
    <item>
      <title>Robust and Fast BiCG Method using SIMD-Accelerated DD Arithmetic</title>
      <link>https://hishinuma-t.dev/papers/wo_review/precon2017/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/precon2017/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>Shorting of Transfer Duration Using File Transfer Striping</title>
      <link>https://hishinuma-t.dev/papers/wo_review/isat_kayama/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/isat_kayama/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>SIMD Parallel Sparse Matrix-Vector and Transposed-Matrix-Vector Multiplication in DD Precision</title>
      <link>https://hishinuma-t.dev/papers/with_review/vecpar2016/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/vecpar2016/</guid>
      <description>Download PDF  Citation (bibtex) edings{hishinuma2016vecpar, title={SIMD parallel sparse matrix-vector and transposed-matrix-vector multiplication in DD precision}, author={Hishinuma, Toshiaki and Hasegawa, Hidehiko and Tanaka, Teruo}, booktitle={International Conference on Vector and Parallel Processing}, pages={21--34}, year={2016}, organization={Springer} } Abstract We accelerate a double-precision sparse matrix and DD vector multiplication (DD-SpMV) and its transposition and DD vector multiplication (DD-TSpMV) using SIMD AVX2. AVX2 requires changing the memory access pattern to allow four consecutive 64-bit elements to be read at once.</description>
    </item>
    
    <item>
      <title>Xev-GMP: Automatic Code Generation for GMP Multiple-Precision Code from C Code</title>
      <link>https://hishinuma-t.dev/papers/with_review/cse2016/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/cse2016/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2016cse, author={Hishinuma, Toshiaki and Sakakibara, Takuma and Fujii, Akihiro and Tanaka, Teruo and Hirasawa, Shoichi}, booktitle={2016 IEEE Intl Conference on Computational Science and Engineering (CSE) and IEEE Intl Conference on Embedded and Ubiquitous Computing (EUC) and 15th Intl Symposium on Distributed Computing and Applications for Business Engineering (DCABES)}, title={Xev-GMP: Automatic Code Generation for GMP Multiple-Precision Code from C Code}, year={2016}, month={Aug},} pages={295-298}, doi={10.1109/CSE-EUC-DCABES.2016.200}, Abstract We propose directive-based automatic code generation for a multiple-precision code from a C code with double precision.</description>
    </item>
    
    <item>
      <title>Xevolverを用いたGMPコードへの自動変換機能の実装</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_maruchi/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_maruchi/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2015_maruchi, title={{Xevolverを用いたGMPコードへの自動変換機能の実装}}, author={丸地賢 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, journal={{第77回情報処理学会全国大会}}, pages={37--38}, year={2015} } </description>
    </item>
    
    <item>
      <title>京・FX10における倍々精度演算の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc151/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc151/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc151, title={{京・FX10における倍々精度演算の高速化}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 椋木大地 and 今村俊幸}, journal={{情報処理学会研究報告}}, volume={2018-HPC-151}, number={15}, pages={1--7}, year={2015} } </description>
    </item>
    
    <item>
      <title>倍精度BCRS形式疎行列と倍々精度ベクトル積のAVX2による高速計算</title>
      <link>https://hishinuma-t.dev/papers/wo_review/mpcomp4/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/mpcomp4/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>反復解法ライブラリ向け倍々精度演算のAVXを用いた高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc135/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc135/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc167, title={{反復解法ライブラリ向け倍々精度演算のAVXを用いた高速化}}, author={菱沼利彰 and 浅川圭介 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={{情報処理学会研究報告}}, volume={2018-HPC-135}, number={16}, pages={1--8}, year={2012} } </description>
    </item>
    
    <item>
      <title>多倍長精度プログラムの自動生成機構Xev-GMPにおける混合精度プログラムの生成と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc157/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc157/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc157, title={{多倍長精度プログラムの自動生成機構Xev-GMPにおける混合精度プログラムの生成と評価}}, author={榊原巧磨 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, author={斯波柾 and 菱沼利彰 and 田中輝雄 and 藤井昭宏 and 平澤将一}, journal={{情報処理学会研究報告}}, volume={2018-HPC-157}, number={3}, pages={1--8}, year={2016} } </description>
    </item>
    
    <item>
      <title>疎行列ベクトル積に対するOpenMPスケジューリング方式の分析</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpcs2014/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpcs2014/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>プライバシーポリシーについて</title>
      <link>https://hishinuma-t.dev/about/privacy/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/about/privacy/</guid>
      <description>当サイトが使用しているアクセス解析ツールについて 当サイトではGoogleによるアクセス解析ツールGoogleアナリティクスを利用しています． Googleアナリティクスはトラフィックデータの収集のためにCookieを使用しています． このトラフィックデータは匿名で収集されており，個人を特定するものではありません． この機能はCookieを無効にすることで収集を拒否することが可能です． この規約に関しての詳しい情報はGoogleのWebサイトでご確認ください．
個人情報の第三者への開示 当サイトを通じて得られた個人情報は適切に管理し，以下に該当する場合を除いて第三者に開示することはありません．
 本人のご了解がある場合 法令等への協力のため、開示が必要となる場合 個人情報の開示、訂正、追加、削除、利用停止  本人からの個人データの開示，訂正，追加，削除ご希望の場合には， ご本人であることを確認させていただいた上，速やかに対応させていただきます．
免責事項 当サイトからリンクやバナーなどによって他のサイトに移動された場合， 移動先サイトで提供される情報、サービス等について一切の責任を負いません．
当サイトのコンテンツや情報について，可能な限り正確な情報を掲載するよう努めておりますが， 誤情報が入り込んだり，情報が古くなっていることがあります．
当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねます． 修正が必要な箇所を発見された場合はメールまたはTwitterのDMにてお報せください．
広告の配信について 当サイトには第三者による広告サービスを利用しているページや，利用しているページへのリンクを含みます． このような広告配信事業者はユーザーの興味に応じた商品やサービスの広告を表示するためCookie を使用することがあります． これらの広告に関する詳細は広告配信元のWebサイトからご確認ください．</description>
    </item>
    
    <item>
      <title>Intel Xeonプロセッサ上におけるAVX512を用いた倍々精度演算の性能評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020_doi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020_doi/</guid>
      <description>@article{doi_jsiam2020, title={{Intel Xeonプロセッサ上におけるAVX512を用いた倍々精度演算の性能評価}}, author={土肥樹 and 菱沼利彰 and 田中輝雄 and 藤井 昭宏}, journal={{日本応用数理学会 2020年度年会}}, pages={107--108}, year={2020} } Link: https://annual2020.jsiam.org/</description>
    </item>
    
  </channel>
</rss>