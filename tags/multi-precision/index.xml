<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-Precision on hpc::numa.blog()</title>
    <link>https://hishinuma-t.dev/tags/multi-precision/</link>
    <description>Recent content in Multi-Precision on hpc::numa.blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (C) 2020 Toshiaki Hishinuma, All rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hishinuma-t.dev/tags/multi-precision/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>混合精度Krylov部分空間法による連立一次方程式の求解について (前編)</title>
      <link>https://hishinuma-t.dev/posts/advent2020/numerical_analysis16/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/advent2020/numerical_analysis16/</guid>
      <description>20201217追記：よくよく読み返してみるとタイトルが「混合精度」なのに話してることが「高精度」だけで精度を混ぜる話なんにもしてないことに気づいたのでこっそり「前編」だったことにしました．後編は今度書きます．
はじめに この記事は数値計算 Advent Calendar 2020の16日目の記事です．
みなさん連立一次方程式解いてますか？
この研究は脳筋マゾヒストが何も分からずにKrylov部分空間法という闇を殴り続けている過程について書きます．
本記事では連立一次方程式解法の1つのカテゴリであるKrylov部分空間法と， Krylov部分空間法を高精度演算で行うことについて扱います．
高精度と聞いて円周率みたいな細かい桁のシミュレーションと思った方, そういう話じゃありません． 本記事ではみなさんが普段やるような1.0e-8とかの近似解を求める場合に高精度演算を使うと良さそうだ．という話をします．
なお，
 Krylov部分空間法の詳しい説明はしませんので詳しいことが知りたい人はSaad大先生の本を読んでください(PDF落ちてます) 作成者はHPCと高精度演算の人なので理論方面の説明はざっくりです このブログでmathjaxを使うのが初で苦戦してます．数式周りは心の目で見てください 最後まで読んでも高精度演算でKrylov部分空間を実装すると便利だなあ！とはなりません．僕の苦しみが共有されるだけです．応用研究に協力してくれる人を募集しています この記事は個人として書いているので所属とは関係ない Qiitaが嫌いなので個人サイトに書いてますが，コメント等あったらTwitterかメールなりで頂けたらと思います  それでは本編を始めます．
 連立一次方程式 $$ Ax = b $$ の求解アルゴリズムは様々なものが提案されています．
(mathjax使えた～よかった～設定疲れた～)
最も有名なものは直接解法に分類されるLU分解 (ガウスの消去法)かと思います．
これはN*Nの行列に対して， \[{2 \over 3}N^3 (後退代入を含む) \] の計算量で求解できる優れたアルゴリズムです．
一方で多くの物理シミュレーションで現れる偏微分方程式などを差分法や有限要素法などを用いて離散化することによって得られる行列は疎行列 (行列の要素がほとんどゼロの行列)です．
疎行列は解析領域を格子分割するなどによって得られ，解析領域を細かく分割することによって離散化誤差を減らし精度の高いシミュレーションを行えますが，行列のサイズは大きくなり求解にかかる時間が増大します．
一般的に離散化により得られる疎行列は格子点数に依存した次元数および各格子点の節点間の接続に依存した非零要素をもつため， このとき1行あたりの非零要素は変わらず，行列の次元数だけが増えていくことが多いため，行列の密度はどんどん減っていきます．
 ※ 1行あたりの非零要素数は元の問題にも依存しますが，多くて100くらいが一般的に思います (例外はいくらでもありますが)．
そのためN*N行の行列全体の非零要素数は100N程度しかないような行列になります．
※ 実際にこのような行列がどのようにして現れるかについては@nqomorita氏が数値計算Advent Calendar 2018で書かれた 有限要素法と反復法線形ソルバのはじめの一歩[前編]などを読んでください (仕事が明らかに忙しいのは知ってますが後編楽しみに待ってます！)
 話を戻すとこのような疎行列はメモリ使用量を節約するために行番号や列番号のインデックス配列を用いて零要素を記憶しない格納形式を用います (詳しくはCRS形式などを調べてください)．
このような疎行列のメモリレイアウトを用いた場合，後から値を挿入(fill-in)したり列方向にアクセスしたりするのが非常に面倒です．
気軽な気持ちで行列行列積なんかした日には結果として密行列が出てくるので台無しです(疎×疎は疎とは限らない)．
そのため疎行列を係数とする連立一次方程式解法では疎行列の値の書き換えや挿入が頻繁に行われるLU分解などの直接解法でなく反復解法がよく使われます． (なお，マルチフロンタル法など疎行列を疎のままでLU分解する手法もありますが，それについては触れません)
Krylov部分空間法と共役勾配法 Krylov部分空間法は， 連立一次方程式$$Ax = b$$ に対する 初期近似解x_0に対応する初期残差ベクトル $$ r_0 = b - Ax_0$$ を用いて Aのべき乗とr_0の積の像が張る空間から近似解を探索する反復法アルゴリズムの一つのカテゴリで， 行列の性質に応じて様々なアルゴリズムがあります．</description>
    </item>
    
    <item>
      <title>AVX2を用いた高速な倍々精度疎行列計算ソフトウェアの有限要素解析への適用可能性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020/</guid>
      <description>Citation (bibtex) @article{hishinuma_jsism2020, title={{AVX2を用いた高速な倍々精度疎行列計算ソフトウェアの有限要素解析への適用可能性評価}}, author={菱沼利彰 and 森田直樹}, journal={{日本応用数理学会 2020年度年会}}, pages={417--418}, year={2020} } Link: https://annual2020.jsiam.org/</description>
    </item>
    
    <item>
      <title>混合精度疎行列計算ライブラリDD-AVX v3のv1.0をリリースした</title>
      <link>https://hishinuma-t.dev/posts/tools/dd-avx_v10/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/tools/dd-avx_v10/</guid>
      <description>はじめに DD-AVX_v3という名前なのにv1.0とはこれいかに？
ま，まぁとりあえずリリースしたんじゃよ
githubから落としてこられる↓
https://github.com/t-hishinuma/DD-AVX_v3
DD-AVX_v3ってなに？ 一言でいうとSIMDで高速化した倍精度とDouble-Double精度のSparse BLAS．
混合精度のKrylov部分空間法をいかに簡単かつ高速に実装できるかを考えて作ったライブラリ．
悪条件な問題を解こうとしたとき，高精度演算を使うことで丸め誤差による近似解の収束の影響を抑えて早く収束できる．
ただ，例えば行列は他のライブラリから降ってくるので倍精度でよいとか， 残差の計算は別に倍精度でも良いとか，様々な理由ですべてを倍々精度にしなくても良いというシチュエーションがある．
しかし，変数の精度をどうすれば効率的に計算できるのかはよくわからないし， 普通に考えれば独自型と標準型を組み合わせたコードで変数の型をコロコロ変えるのは吐き気がするレベルで面倒くさい．
私は博士に進学する前は高精度なシミュレーションをやりたいと思ったものだが， 倍精度とDDを組み合わせたKrylov部分空間法を簡単に作るのがそもそも面倒臭すぎる ということで始まったのがDD-AVXライブラリで，色々とI/Fを変えているうちにv3になってしまったということである．
DD型を簡単に扱う方法はBailey, Hida先生のQDライブラリの dd_real 型を使うことになるのだが， ベクトルや行列を std::vector&amp;lt;dd_real&amp;gt; のようにして宣言することになる．
このときメモリレイアウト的には下のようなAoS型になる． これが倍精度と組み合わせて混合精度演算をしたり，並列化をしようとしたときに非常に遅くなる．
そこでSoA型にしようとなるのだが，これは std::vector のようなベクトルを簡単に使うI/Fが利用できなくなる．
じゃあSoA型に気合で std::vector っぽい主要機能を全部書いてやればいいやんけ
これが地獄の始まりでした(車輪の再発明ってレベルじゃないぞ1年かかったわ)
ということでDD-AVX_v3では5つのクラスを提供している．
Scalar  d_real (alias of double) dd_real (provided by the QD Library)  Vector  d_real_vector dd_real_vector  Sparse matrix (CRS format)  d_real_SpMat  スカラやベクタの四則演算レベルから基本的な機能を実装してある． これらはD/DDのキャストや代入などもサポートしているため， 連立一次方程式ソルバをtemplateで実装すれば同じI/Fで倍精度とDD型を使える．
現状ではテスト不足で疎行列型はファイルからのI/Oしかできないのと，SpMVしか実装できないです．v1.1でTSpMVと行列I/Fは追加予定
内部ではすべての方の組み合わせに対してAVX / AVX2のintrinsicsを使って最適化してあるため， どの変数を入れてもDDにキャストされるわけではなく，ちゃんと入力に応じたDDのアルゴリズムが呼ばれるようになっている．
ちなみにaxpyの内部実装はこんな感じ↓
https://github.com/t-hishinuma/DD-AVX_v3/blob/master/src/vector/blas/axpy.cpp
具体的にはBLAS Lv.</description>
    </item>
    
    <item>
      <title>gmpの実装とC&#43;&#43;からの利用法，性能について(1) [gmp multi-precision]</title>
      <link>https://hishinuma-t.dev/posts/gmp/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/gmp/</guid>
      <description>はじめに そろそろTwitterのフォロワーが2500人を迎えるそうです． やはりマイナーな世界だけを深堀りするのでなく， もっと大衆受けする活動をしていくべきだと思いました．
そう，つまりマスに訴えかけることでHPC界のヒカキンのような存在になるのです．
では皆が見てくれるような一般的な話題ってなんなのか？
私は考えました．
google analyticsの結果を見るとこのページはPEZYと4倍精度という検索ワードでくる人がほとんどのようですが， そんな一部の研究者しか使わないものでなく，もっとマスに訴えかけるような，そんなテーマを考えました．
選ばれたのはGNUでした
そう．GNUに媚びて生きていこう．
つまり今回のテーマはGMPです．
なんと四則演算やFFTについて触れます．全国民がオオウケ間違いなし!
明日から倍精度を使うのをやめ，楽しい多倍長ライフが始まるはずです！
まぁ真面目に導入すると，2月頃にgccのfloat128の性能について書いたのがそこそこ閲覧数が多かったので， 他の高精度演算ライブラリについてもちょっと書くかー，と思って第2弾としてGMPを取りあげてみるということです．．
実際はもっと前から書いていたのですが，細部が書けずにいて，2500人だしここで公開しようと思い立って今に至ります．
様々な言語で多倍長整数は標準サポートされることも多くなってきましたが， 浮動小数点に関してはほとんど見かけませんし，実装自体も少ないです．
やはり浮動小数点演算は癖が強い(指数部が伸びるのか，仮数部が伸びるのか，どのくらい時間がかかるのか)や， ツールそのものがどういった機能を持っているかが分かりにくいです．
今回はGMPに着目して，機能面や実装面について紹介していきたいと思います．
ただ，GMPにはいろいろな難しい特徴があり，正直私もあまり詳しい事は言えないので，フォロワー2500人記念とかぶち上げておいてあれですが， 今回の記事では私が現状で知っているGMPの実装についてちゃんとまとめ，使い方と性能を簡単に見ることにします． (GMPで論文何件か書いたとは思えないほど内部の実装に自信がないおじさん)
GMPを用いたプログラム GMPはGNU Multi Precision Arithmetic Libraryのことで，float128などが4倍精度固定であるのに対し， GMPは変数の宣言時，またはどこかでデフォルトの仮数部の精度を指定することで任意の精度型を作ることができます．
ただし，仮数部を自動的に伸ばしたり，自動的に選択するような機能はついていません(そんなことをしたらメモリが大変なことに)．
指数部については固定で，仮数部を指定していくことになります． そのため例題などではよく円周率などが扱われる印象があります．
ここではC++版のgmpxx.hを使ってGMPの多倍長浮動小数点型であるmpf_tのC++ Wrapper, mpf_classを使ってみます． C++版を使えば演算子オーバーロードによって比較的簡単に実装することができます．
すべての変数が同じ精度で良い場合は，mpf_set_default_prec()という関数を使って精度を指定すればよいです． 簡単なプログラムは以下のようになります．
#include&amp;lt;gmpxx.h&amp;gt;#include&amp;lt;iostream&amp;gt;int main(){ mpf_set_default_prec(1024); mpf_class a(1.5); // a = 1.5 	mpf_class b = 1.0; mpf_class c = 0.0; c = a + b; std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl; return 0; } ね？簡単でしょ？</description>
    </item>
    
    <item>
      <title>SIMD演算を用いた高精度疎行列計算ソフトウェアの高速化</title>
      <link>https://hishinuma-t.dev/papers/dr_thesis/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/dr_thesis/</guid>
      <description>Download PDF  Information  著者: 菱沼 利彰 学位授与大学: 筑波大学 (University of Tsukuba) 取得学位: 博士（情報学） / Doctor of Philosophy in Informatics JaLC DOI: info:doi/10.15068/00160612 学位授与年月日: 2020-03-25 報告番号: 12102甲第9609号  etc.  博士論文を情報処理学会 2019年度研究会推薦博士論文速報にて取り上げていただきました．URL, (魚拓) 上記の研究会推薦博士論文速報が情報処理 第61巻，第9月号に掲載されました．URL (記念写真1, 2)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hishinuma-t.dev/posts/monolish/v0_14_0/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/monolish/v0_14_0/</guid>
      <description>2011年，5月のリリースでgcc4.6から4倍精度が入った． 昔のブログで軽く使い方を書いたが他のサイトに情報があまり増えてなかったし，私の記事もできが悪かったのでこっちに移転したので改めてまとめてみた．
g++ -fopenacc -foffload=nvptx-none=&amp;quot;-misa=sm_35&amp;quot; -O3 -std=c++11 -fopenmp -fcf-protection=none acc.cpp -o acc.out mkoffload: fatal error: either &#39;-fopenacc&#39; or &#39;-fopenmp&#39; must be set compilation terminated. lto-wrapper: fatal error: /usr/lib/gcc/x86_64-linux-gnu/10//accel/nvptx-none/mkoffload returned 1 exit status compilation terminated. /usr/bin/ld: error: lto-wrapper failed collect2: error: ld returned 1 exit status make: *** [Makefile:22: acc.out] Error 1 使い方 簡単な使い方としては， libquadmathを使うことになる．
__float128 型を宣言して使う．倍精度を代入して使うこともできる． 4倍精度数を表現したい場合には後ろに q をつけて使う．
四則演算子や代入なども使えるが，printfだけはchar型の配列に変換してから使う必要がある． 適当なサンプルは以下のとおり：
#include&amp;lt;quadmath.h&amp;gt;#include&amp;lt;stdio.h&amp;gt;int main(){ char str[128]; __float128 a = 1.2345678901234567890q; __float128 b = 1.</description>
    </item>
    
    <item>
      <title>gccの4倍精度の使い方と性能 [gcc quadruple precision]</title>
      <link>https://hishinuma-t.dev/posts/gcc_quad/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/posts/gcc_quad/</guid>
      <description>2011年，5月のリリースでgcc4.6から4倍精度が入った． 昔のブログで軽く使い方を書いたが他のサイトに情報があまり増えてなかったし，私の記事もできが悪かったのでこっちに移転したので改めてまとめてみた．
使い方 簡単な使い方としては， libquadmathを使うことになる．
__float128 型を宣言して使う．倍精度を代入して使うこともできる． 4倍精度数を表現したい場合には後ろに q をつけて使う．
四則演算子や代入なども使えるが，printfだけはchar型の配列に変換してから使う必要がある． 適当なサンプルは以下のとおり：
#include&amp;lt;quadmath.h&amp;gt;#include&amp;lt;stdio.h&amp;gt;int main(){ char str[128]; __float128 a = 1.2345678901234567890q; __float128 b = 1.234; a = a + b; quadmath_snprintf(str,128,&amp;#34;%.40Qf&amp;#34;,a); printf(&amp;#34;%s&amp;#34;,str); return (0); } $ g++ -lquadmath -m128bit-long-double test.c こんな感じに作れる．I/Oがなければ同じプログラムでtemplate使って共通化できるが， I/Oだけは色々調べたがどうしようもなさそうだった．
性能評価 試しに内積を実装して時間を測ってみた．
コードはここにおいた (リポジトリを移動しました, 2020/05/18)．
出力を外に出せば，普通に倍精度と共通化してtemplateで作れた．
gcpで16コアのHaswellマシンを借りて実行してみた．
あんまり参考にはならないが Intel(R) Xeon(R) CPU @ 2.30GHzとのこと．
gccはgcc version 8.2.1 20180905 (Red Hat 8.2.1-3)
OSはCentOS Linux release 8.0.1905 (Core)\
表 各ベクトルサイズにおける倍精度と4倍精度の実行時間 [ms] (-O0, 最適化オプションなし，16 threads)</description>
    </item>
    
    <item>
      <title>An Evaluation of Double-Double Precision Operation for Iterative Solver Library Using AVX</title>
      <link>https://hishinuma-t.dev/papers/wo_review/isat_hishinuma/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/isat_hishinuma/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>AVX Acceleration of DD Arithmetic Between a Sparse Matrix and Vector</title>
      <link>https://hishinuma-t.dev/papers/with_review/ppam2013/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/ppam2013/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2013ppam, title={AVX acceleration of DD arithmetic between a sparse matrix and vector}, author={Hishinuma, Toshiaki and Fujii, Akihiro and Tanaka, Teruo and Hasegawa, Hidehiko}, booktitle={International Conference on Parallel Processing and Applied Mathematics}, pages={622--631}, year={2013}, organization={Springer} } Abstract High precision arithmetic can improve the convergence of Krylov subspace methods; however, it is very costly. One system of high precision arithmetic is double-double (DD) arithmetic, which uses more than 20 double precision operations for one DD operation.</description>
    </item>
    
    <item>
      <title>AVX2 acceleration of SpMV and vector operations with Double-double precision vectors</title>
      <link>https://hishinuma-t.dev/papers/wo_review/pmaa18/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/pmaa18/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍々精度反復解法の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc148/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc148/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc148, title ={{AVX2を用いた倍々精度反復解法の高速化}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{情報処理学会研究報告}}, volume={2018-HPC-148}, number={9}, pages={1--7}, year={2015} } </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍々精度演算の反復解法への適用と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_at/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_at/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>AVX2を用いた倍精度BCRS形式疎行列と倍々精度ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/with_review/acs48/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/acs48/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma2014acs, title={{AVX2 を用いた倍精度 BCRS 形式疎行列と倍々精度ベクトル積の高速化}}, author={菱沼利彰 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={{情報処理学会論文誌コンピューティングシステム (ACS)}}, volume={7}, number={4}, pages={25--33}, year={2014} } Abstract 高精度演算を用いることでKrylov部分空間法の収束を改善できるが，高精度演算はコストが高いことが知られている．高精度演算の1つに，倍精度を2つ組み合わせて4倍精度演算を行う倍々精度演算がある．我々は，IntelのSIMD拡張命令であるAVX2を用いてBCRS形式の倍精度疎行列と倍々精度ベクトルの積（DD-SpMV）の高速化を行った．AVX2を用いたCRS形式のDD-SpMVでは，各行で端数処理などを必要とするが，BCRS形式は端数処理をなくし，メモリアクセスを改善できる．しかし，BCRS形式は演算量が増加する．本論文では，AVX2に適したBCRS形式のブロックサイズと，増加した演算量と端数処理の削減，メモリアクセスの改善効果のトレードオフについて示した．実験の結果，AVX2に最も適したブロックサイズは4×1であることが分かった．また，メモリアクセスの改善効果はサイズの大きい問題ほど有効で，行列サイズが10 5以上のとき，演算量が3.3倍以上になるケースにおいても，BCRS4×1にすることでCRS形式の実行時間を約45%に短縮できることを確認した．
Links 情報処理学会論文誌 コンピューティングシステム
情報処理学会 電子図書館</description>
    </item>
    
    <item>
      <title>AVX2を用いた倍精度疎行列と倍々精度ベクトルの積における精度と性能</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2015/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2015/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積 -転置行列-</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpcs2013_poster/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpcs2013_poster/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/with_review/hpcs2013/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/hpcs2013/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma2013hpcs, title={{AVX を用いた倍々精度疎行列ベクトル積の高速化}}, author={菱沼利彰 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={ハイパフォーマンスコンピューティングと計算科学シンポジウム論文集}, volume={2013}, pages={23--31}, year={2013} } Abstract 計算性能の向上に伴い，高精度による計算が多くの場面で可能となっている．4倍精度を効率良く実現する手法として，2つの倍精度変数で1つの4倍精度変数を表現する倍々精度演算がある．本研究では，疎行列とベクトルの演算に使われる基本演算をAVX命令を用いて高速化し，性能を決定するパラメタについて分析を行うことにより，倍々精度演算をAVXで行う際の効果を示した．AVX命令を用いた場合，同時演算数の増加，3オペランド化によるレジスタ退避，復元処理の減少などの効果が大きく，SSE2の性能と比べて，キャッシュに収まる範囲のベクトル間の演算では約1.7から2.3倍の性能となったが，キャッシュに収まらない場合は，キャッシュアクセス，メモリアクセスが大きなボトルネックになることがわかった．倍精度の疎行列と倍々精度のベクトルの積では，約1.1から1.9倍の性能となり，メモリアクセスはボトルネックとならず，疎行列の1行あたりの非零要素の数が性能に大きな影響を与えていることがわかった．これらの結果から，倍々精度の疎行列ベクトル積の性能を予測する1つの指標を導出した．
Links HPCS2013
情報処理学会 電子図書館</description>
    </item>
    
    <item>
      <title>AVXを用いた倍々精度疎行列ベクトル積の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/mpcomp3/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/mpcomp3/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>Effectiveness of performance tuning techniques for general matrix multiplication on the pezy-sc2</title>
      <link>https://hishinuma-t.dev/papers/with_review/heart2019/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/heart2019/</guid>
      <description>Citation (bibtex) @inproceedings{10.1145/3337801.3337817, author = {Matsumoto, Kazuya and Nakasato, Naohito and Hishinuma, Toshiaki}, title = {Effectiveness of Performance Tuning Techniques for General Matrix Multiplication on the PEZY-SC2}, year = {2019}, isbn = {9781450372558}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3337801.3337817}, doi = {10.1145/3337801.3337817}, booktitle = {Proceedings of the 10th International Symposium on Highly-Efficient Accelerators and Reconfigurable Technologies}, articleno = {8}, numpages = {6}, location = {Nagasaki, Japan}, series = {HEART 2019} } Links ACM</description>
    </item>
    
    <item>
      <title>Fast computation of double precision sparse matrix in BCRS and DD vector product using AVX2</title>
      <link>https://hishinuma-t.dev/papers/wo_review/vecpar2014/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/vecpar2014/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>GMPを用いた混合精度型プログラムの自動生成機構の提案</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_mp/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os_2016_mp/</guid>
      <description>Download PDF  </description>
    </item>
    
    <item>
      <title>GMPライブラリを用いた任意多倍長プログラムへの自動変換機構の提案</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc152/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc152/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc152, title={{GMPライブラリを用いた任意多倍長プログラムへの自動変換機構の提案}}, author={榊原巧磨 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, journal={{情報処理学会研究報告}}, volume={2018-HPC-152}, number={6}, pages={1--8}, year={2015} } </description>
    </item>
    
    <item>
      <title>Intel/KNLにおける倍々精度疎行列ベクトル積の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_doi/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_doi/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2018_doi, title={{Intel/KNLにおける倍々精度疎行列ベクトル積の特性評価}}, author={土肥樹 and 伊藤友太 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第80回情報処理学会全国大会}}, pages={51--52}, year={2018} } </description>
    </item>
    
    <item>
      <title>Knights Landingにおける倍々精度基本演算のハイブリッド並列の特性評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_ito/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_ito/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2018_ito, title={{Knights Landingにおける倍々精度基本演算のハイブリッド並列の特性評価}}, author={伊藤友太 and 土肥樹 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{第80回情報処理学会全国大会}}, pages={55--56}, year={2018} } </description>
    </item>
    
    <item>
      <title>Many Integrated Corearchitecture における倍々精度疎行列ベクトル積</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc145/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc145/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc145, title={{Many Integrated Corearchitecture における倍々精度疎行列ベクトル積}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄}, journal={{情報処理学会研究報告}}, volume={2018-HPC-145}, number={16}, pages={1--7}, year={2014} } </description>
    </item>
    
    <item>
      <title>PEZY-SC2上における倍々精度Rgemmの実装と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2018/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2018/</guid>
      <description>Download PDF  SlideShare </description>
    </item>
    
    <item>
      <title>PEZY-SC2上における倍々精度演算ライブラリpzqdを用いた倍々精度Rgemmの高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc167/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc167/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc167, title={PEZY-SC2 上における倍々精度演算ライブラリ pzqd を用いた倍々精度 Rgemm の高速化}, author={菱沼利彰 and 中田真秀}, journal={{情報処理学会研究報告}}, volume={2018-HPC-167}, number={10}, pages={1--9}, year={2018} } </description>
    </item>
    
    <item>
      <title>pzqd: PEZY-SC2 Acceleration of Double-Double Precision Arithmetic Library for High-Precision BLAS.</title>
      <link>https://hishinuma-t.dev/papers/with_review/icces2019/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/icces2019/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2019pzqd, title={pzqd: PEZY-SC2 Acceleration of Double-Double Precision Arithmetic Library for High-Precision BLAS}, author={Hishinuma, Toshiaki and Nakata, Maho}, booktitle={International Conference on Computational \&amp;amp; Experimental Engineering and Sciences}, pages={717--736}, year={2019}, organization={Springer} } Abstract We implemented pzqd, a high precision arithmetic library for the PEZY-SC2 that is based on Hida \etal{}&amp;lsquo;s QD library. PEZY-SC2 is an MIMD (multiple instruction stream, multiple data stream) -type many-core processor. We optimized matrix-matrix multiplication (Rgemm) in double-double precision (DD) on the PEZY-SC2.</description>
    </item>
    
    <item>
      <title>Robust and Fast BiCG Method using SIMD-Accelerated DD Arithmetic</title>
      <link>https://hishinuma-t.dev/papers/wo_review/precon2017/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/precon2017/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>SIMD Parallel Sparse Matrix-Vector and Transposed-Matrix-Vector Multiplication in DD Precision</title>
      <link>https://hishinuma-t.dev/papers/with_review/vecpar2016/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/vecpar2016/</guid>
      <description>Download PDF  Citation (bibtex) edings{hishinuma2016vecpar, title={SIMD parallel sparse matrix-vector and transposed-matrix-vector multiplication in DD precision}, author={Hishinuma, Toshiaki and Hasegawa, Hidehiko and Tanaka, Teruo}, booktitle={International Conference on Vector and Parallel Processing}, pages={21--34}, year={2016}, organization={Springer} } Abstract We accelerate a double-precision sparse matrix and DD vector multiplication (DD-SpMV) and its transposition and DD vector multiplication (DD-TSpMV) using SIMD AVX2. AVX2 requires changing the memory access pattern to allow four consecutive 64-bit elements to be read at once.</description>
    </item>
    
    <item>
      <title>Xev-GMP: Automatic Code Generation for GMP Multiple-Precision Code from C Code</title>
      <link>https://hishinuma-t.dev/papers/with_review/cse2016/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/with_review/cse2016/</guid>
      <description>Download PDF  Citation (bibtex) @inproceedings{hishinuma2016cse, author={Hishinuma, Toshiaki and Sakakibara, Takuma and Fujii, Akihiro and Tanaka, Teruo and Hirasawa, Shoichi}, booktitle={2016 IEEE Intl Conference on Computational Science and Engineering (CSE) and IEEE Intl Conference on Embedded and Ubiquitous Computing (EUC) and 15th Intl Symposium on Distributed Computing and Applications for Business Engineering (DCABES)}, title={Xev-GMP: Automatic Code Generation for GMP Multiple-Precision Code from C Code}, year={2016}, month={Aug},} pages={295-298}, doi={10.1109/CSE-EUC-DCABES.2016.200}, Abstract We propose directive-based automatic code generation for a multiple-precision code from a C code with double precision.</description>
    </item>
    
    <item>
      <title>Xevolverを用いたGMPコードへの自動変換機能の実装</title>
      <link>https://hishinuma-t.dev/papers/wo_review/ipsj_maruchi/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/ipsj_maruchi/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_ipsj2015_maruchi, title={{Xevolverを用いたGMPコードへの自動変換機能の実装}}, author={丸地賢 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, journal={{第77回情報処理学会全国大会}}, pages={37--38}, year={2015} } </description>
    </item>
    
    <item>
      <title>京・FX10における倍々精度演算の高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc151/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc151/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc151, title={{京・FX10における倍々精度演算の高速化}}, author={佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 椋木大地 and 今村俊幸}, journal={{情報処理学会研究報告}}, volume={2018-HPC-151}, number={15}, pages={1--7}, year={2015} } </description>
    </item>
    
    <item>
      <title>倍精度BCRS形式疎行列と倍々精度ベクトル積のAVX2による高速計算</title>
      <link>https://hishinuma-t.dev/papers/wo_review/mpcomp4/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/mpcomp4/</guid>
      <description>Download Slide  </description>
    </item>
    
    <item>
      <title>反復解法ライブラリ向け倍々精度演算のAVXを用いた高速化</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc135/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc135/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc167, title={{反復解法ライブラリ向け倍々精度演算のAVXを用いた高速化}}, author={菱沼利彰 and 浅川圭介 and 藤井昭宏 and 田中輝雄 and 長谷川秀彦}, journal={{情報処理学会研究報告}}, volume={2018-HPC-135}, number={16}, pages={1--8}, year={2012} } </description>
    </item>
    
    <item>
      <title>多倍長精度プログラムの自動生成機構Xev-GMPにおける混合精度プログラムの生成と評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpc157/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpc157/</guid>
      <description>Download PDF  Citation (bibtex) @article{hishinuma_hpc157, title={{多倍長精度プログラムの自動生成機構Xev-GMPにおける混合精度プログラムの生成と評価}}, author={榊原巧磨 and 佐々木信一 and 菱沼利彰 and 藤井昭宏 and 田中輝雄 and 平澤将一}, author={斯波柾 and 菱沼利彰 and 田中輝雄 and 藤井昭宏 and 平澤将一}, journal={{情報処理学会研究報告}}, volume={2018-HPC-157}, number={3}, pages={1--8}, year={2016} } </description>
    </item>
    
    <item>
      <title>疎行列ベクトル積に対するOpenMPスケジューリング方式の分析</title>
      <link>https://hishinuma-t.dev/papers/wo_review/hpcs2014/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/hpcs2014/</guid>
      <description>Download PDF  Download Poster PDF  </description>
    </item>
    
    <item>
      <title>Intel Xeonプロセッサ上におけるAVX512を用いた倍々精度演算の性能評価</title>
      <link>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020_doi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hishinuma-t.dev/papers/wo_review/jsiam_os2020_doi/</guid>
      <description>@article{doi_jsiam2020, title={{Intel Xeonプロセッサ上におけるAVX512を用いた倍々精度演算の性能評価}}, author={土肥樹 and 菱沼利彰 and 田中輝雄 and 藤井 昭宏}, journal={{日本応用数理学会 2020年度年会}}, pages={107--108}, year={2020} } Link: https://annual2020.jsiam.org/</description>
    </item>
    
  </channel>
</rss>